#+TITLE: Emacs config file
Partially inspired by https://github.com/daviwil/dotfiles/blol/master/Emacs.org

* Personal information
Set personal information.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Eduardo Lemos Rocha"
      user-mail-address "dudulr10@gmail.com"
      user-work-mail-address "eduardo.lemos@datarisk.io"
      calendar-latitude -15.77972
      calendar-longitude -47.92972
      calendar-location-name "Brasilia, Brasil")
#+END_SRC
* Startup performance
  Make startup daster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
#+begin_src emacs-lisp
    ;; -*- lexical-binding: t; -*-

    ;; The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))

    ;; Profile emacs startup
    (add-hook 'emacs-startup-hook
	      (lambda ()
		(message "*** Emacs loaded in %s seconds with %d garbage collections."
		     (format "%.2f seconds"
			     (float-time
			      (time-subtract after-init-time before-init-time)))
		     gcs-done)))
#+end_src
* Package Management

  Set up ELPA, MELPA, and Org package repositories and load use-package to manage package configuration.

  NOTE: I'm keeping this section in but disabling tangling for now because I'm trying out straight.el as an alternative.

  #+begin_src emacs-lisp
    ;; This must come before configurations of installed packages.
    (setq load-prefer-new t)

    ;; Initialize package sources
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("melpa-stable" . "https://stable.melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("gnu" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    (unless (package-installed-p 'use-package)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t)

    ;; Uncomment this to get a reading on packages that get loaded at startup
    (setq use-package-verbose t)

  #+end_src
* Keep Folders Clean
We use the no-litering package to keep folders where we edit files and the Emacs configuration folder clean! It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.
#+begin_src emacs-lisp
  (use-package no-littering)
  (setq auto-save-file-name-transforms
	`((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  (add-to-list 'load-path "~/.emacs.d/resources/")

  (setq package-enable-at-startup nil)
  (setq custom-file "~/.emacs.d/config/custom-settings.el")
  (load custom-file t)
#+END_SRC

** exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src

* Default Encoding 
  Make emacs UTF-8 compatible for both display and editing.
#+BEGIN_SRC emacs-lisp
  ;; (set-default-coding-systems 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* Keyboard bindings
** ESC Cancels All
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Keybinding panel (which-key)
which-key is great for getting an overview of what keybindings are available based on the prefix keys you entered. 

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config 
    (setq which-key-idle-delay 0.3))
#+END_SRC

** Buffer Management
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)
#+end_src

** Text Scaling
Text scaling bindings.
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-)")
      '(lambda () (interactive) (text-scale-set 0)))
   (define-key global-map (kbd "C-+") 'text-scale-increase)
   ;; (define-key global-map (kbd "C-=") 'text-scale-increase)
   (define-key global-map (kbd "C--") 'text-scale-decrease)
 #+END_SRC

** User Interface
   Clean up Emacs’ user interface, make it more minimal.
#+BEGIN_SRC emacs-lisp
;; No, thanks.
(setq inhibit-splash-screen t)
(setq initial-scratch-message nil)
(setq inhibit-startup-message t)

;;(menu-bar-mode 0)     ; Disable the menu bar
(tool-bar-mode 0)     ; Disable the toolbar
(tooltip-mode 0)      ; Disable tooltips
(set-fringe-mode 10)  ; Give some breating room
(scroll-bar-mode 0)   ; Disable scroll bar
(column-number-mode)  ; Display column number
(global-hl-line-mode 1) ; Highlight current line
(show-paren-mode 1)   ; Match parenthesis and such in every mode.
(global-visual-line-mode 1) ; Propper line wrapping.
(global-font-lock-mode t) ; Turn synctex highlighting on whenever possible.
#+end_src

Flash mode-line instead of beeping
#+begin_src emacs-lisp
(setq visible-bell nil
      ring-bell-function 'flash-mode-line)
(defun flash-mode-line ()
  (unless (memq this-command         ; Disable bell in the following situations
		            '(isearch-abort
                  abort-recursive-edit
                  exit-minibuffer
                  keyboard-quit))
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line)))
#+END_SRC

This is not a typewriter, sentences do not end with double spaces.
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

Start typing over a selected region and the text is gone.
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

Improve scrolling.
#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX
#+end_src

Default frame size
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

Enable line numbers and customize their format.
#+begin_src emacs-lisp
(column-number-mode)

;; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
		prog-mode-hook
		conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))

;; Override some modes which derive from the above
(dolist (mode '(org-mode-hook
		            term-mode-hook
		            shell-mode-hook
		            eshell-mode-hook
                treemacs-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

Don’t warn for following symlinked files
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

Don’t warn when advice is added for functions
#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept)
#+end_src

** Font
#+BEGIN_SRC emacs-lisp
  ;; Default face
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 113)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 113)
#+END_SRC

** Mode Line
Basic Customization
#+begin_src emacs-lisp
  (setq display-time-format "%H:%M %e %b %y"
	display-time-default-load-average nil)
#+end_src

The diminish package hides pesky minor modes from the modelines.
#+begin_src emacs-lisp
  ;; (use-package diminish)
#+end_src

Icons, icons, icons.
#+BEGIN_SRC emacs-lisp
  ;; You must run (all-the-icons-install-fonts) one time after
  ;; installing this package!
  (use-package all-the-icons
    :config
    (setq all-the-icons-color-icons t)
  )
#+end_src

Minions implements a menu that lists enabled minor-modes, as well as commonly but not currently enabled minor-modes. It can be used to toggle local and global minor-modes, to access mode-specific menus, and to get help about modes.
#+begin_src emacs-lisp
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))
#+end_src

** Doom Mode Line
   Doom mode Line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :init 
    (display-time-mode 1)
    ;;:custom-face
    ;;(mode-line ((t (:height 0.85))))
    ;;(mode-line-inactive ((t (:height 0.85))))
    :custom
    ;; How tall the mode-line should be. It's only respected in GUI.
    ;; If the actual char height is larger, it respects the actual height.
    (doom-modeline-height 15)
    ;; How wide the mode-line bar should be. It's only respected in GUI.
    (doom-modeline-bar-width 6)

    ;; The limit of the window width.
    ;; If `window-width' is smaller than the limit, some information won't be displayed.
    ;; (doom-modeline-window-width-limit fill-column)
    ;; How to detect the project root.
    ;; The default priority of detection is `ffip' > `projectile' > `project'.
    ;; nil means to use `default-directory'.
    ;; The project management packages have some issues on detecting project root.
    ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
    ;; to hanle sub-projects.
    ;; You can specify one if you encounter the issue.
    ;; (doom-modeline-project-detection 'project)
    ;; Determines the style used by `doom-modeline-buffer-file-name'.
    ;;
    ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
    ;;   auto => emacs/lisp/comint.el (in a project) or comint.el
    ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
    ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
    ;;   truncate-with-project => emacs/l/comint.el
    ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
    ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
    ;;   truncate-all => ~/P/F/e/l/comint.el
    ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
    ;;   relative-from-project => emacs/lisp/comint.el
    ;;   relative-to-project => lisp/comint.el
    ;;   file-name => comint.el
    ;;   buffer-name => comint.el<2> (uniquify buffer name)
    ;;
    ;; If you are experiencing the laggy issue, especially while editing remote files
    ;; with tramp, please try `file-name' style.
    ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
    (doom-modeline-buffer-file-name-style 'auto)

    ;; Whether display icons in the mode-line.
    ;; While using the server mode in GUI, should set the value explicitly.
    (doom-modeline-icon (display-graphic-p))
    ;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
    (doom-modeline-major-mode-icon t)
    ;; Whether display the colorful icon for `major-mode'.
    ;; It respects `all-the-icons-color-icons'.
    (doom-modeline-major-mode-color-icon t)
    ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
    (doom-modeline-buffer-state-icon t)

    ;; Whether display the modification icon for the buffer.
    ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
    (doom-modeline-buffer-modification-icon t)

    ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
    ;; (doom-modeline-unicode-fallback nil)

    ;; Whether display the minor modes in the mode-line.
    (doom-modeline-minor-modes t)

    ;; If non-nil, a word count will be added to the selection-info modeline segment.
    (doom-modeline-enable-word-count nil)
    ;; Major modes in which to display word count continuously.
    ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
    ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
    ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
    ;; (doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

    ;; Whether display the buffer encoding.
    (doom-modeline-buffer-encoding t)
    ;; Whether display the indentation information.
    (doom-modeline-indent-info nil)

    ;; If non-nil, only display one number for checker information if applicable.
    ;; (doom-modeline-checker-simple-format t)
    ;; The maximum number displayed for notifications.
    ;; (doom-modeline-number-limit 99)
    ;; The maximum displayed length of the branch name of version control.
    ;; (doom-modeline-vcs-max-length 12)

    ;; Whether display the workspace name. Non-nil to display in the mode-line.
    ;; (doom-modeline-workspace-name t)

    ;; Whether display the perspective name. Non-nil to display in the mode-line.
    (doom-modeline-persp-name nil)
    ;; If non nil the default perspective name is displayed in the mode-line.
    ;; (doom-modeline-display-default-persp-name nil)
    ;; If non nil the perspective name is displayed alongside a folder icon.
    ;; (doom-modeline-persp-icon t)

    ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
    ;; (doom-modeline-lsp t)

    ;; Whether display the GitHub notifications. It requires `ghub' package.
    (doom-modeline-github nil)
    ;; The interval of checking GitHub.
    ;; (doom-modeline-github-interval (* 30 60))

    ;; Whether display the modal state icon.
    ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
    ;; (doom-modeline-modal-icon t)

    ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
    (doom-modeline-mu4e nil)

    ;; Whether display the gnus notifications.
    ;; (doom-modeline-gnus t)
    ;; Wheter gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
    ;; (doom-modeline-gnus-timer 2)  
    ;; Wheter groups should be excluded when gnus automatically being updated.
    ;; (doom-modeline-gnus-excluded-groups '("dummy.group"))

    ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
    (doom-modeline-irc nil)
    ;; Function to stylize the irc buffer names.
    ;; (doom-modeline-irc-stylize 'identity)

    ;; Whether display the environment version.
    ;; (doom-modeline-env-version t)
    ;; Or for individual languages
    ;; (doom-modeline-env-enable-python t)
    ;; (doom-modeline-env-enable-ruby t)
    ;; (doom-modeline-env-enable-perl t)
    ;; (doom-modeline-env-enable-go t)
    ;; (doom-modeline-env-enable-elixir t)
    ;; (doom-modeline-env-enable-rust t)
    ;; Change the executables to use for the language version string
    ;; (doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
    ;; (doom-modeline-env-ruby-executable "ruby")
    ;; (doom-modeline-env-perl-executable "perl")
    ;; (doom-modeline-env-go-executable "go")
    ;; (doom-modeline-env-elixir-executable "iex")
    ;; (doom-modeline-env-rust-executable "rustc")
    ;; What to display as the version while a new one is being loaded
    ;; (doom-modeline-env-load-string "...")

    ;; Hooks that run before/after the modeline version string is updated
    ;; (doom-modeline-before-update-env-hook nil)
    ;; (doom-modeline-after-update-env-hook nil)
    )
#+END_SRC

** Auto-save
   super-save auto-saves your buffers, when certain events happen - e.g. you switch between buffers, an Emacs frame loses focus, etc. You can think of it as both something that augments and replaces the standard auto-save-mode.
#+begin_src emacs-lisp
;;  (use-package super-save
;;    :diminish super-save-mode
;;    :config
;;    (super-save-mode +1)
;;    (setq super-save-auto-save-when-idle t))
#+end_src

Make emacs behave nicely with backup files.
#+BEGIN_SRC emacs-lisp
  (defvar --backup-directory (concat user-emacs-directory "backup"))
  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))
  (setq backup-directory-alist `(("." . ,--backup-directory)))

  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t       ;
        kept-old-versions 0               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t               ; auto-save every buffer that visits a file
        auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
        )
  (setq vc-make-backup-files t)

  ;; Default and per-save backups go here:
  (setq backup-directory-alist '(("" . "~/.emacs.d/backup/per-save")))

  (defun force-backup-of-buffer ()
    ;; Make a special "per session" backup at the first save of each
    ;; emacs session.
    (when (not buffer-backed-up)
      ;; Override the default parameters for per-session backups.
      (let ((backup-directory-alist '(("" . "~/.emacs.d/backup/per-session")))
            (kept-new-versions 3))
        (backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
      (backup-buffer)))

  (add-hook 'before-save-hook  'force-backup-of-buffer)
#+END_SRC

Get rid of lock files.

#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

Ensure files have no trailing spaces when saving, but do have a
newline char (except in Markdown mode).
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook
	    (when '(not markdown-mode))
	    'delete-trailing-whitespace)
  (setq require-final-newline t)
#+END_SRC

Follow symlinks when opening files.
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

If file starts with '#!' it might be a script, make it executable.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

** Auto-reverting changed files
#+begin_src emacs-lisp
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)

#+end_src
  
** Helpful
   Helpful provides better help buffers
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Smartparens and Rainbow Delimiters
   Smartparens is a minor mode for Emacs that deals with parens pairs and tries to be
smart about it.
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :config
    ;; (require 'smartparens-config)
    (smartparens-global-mode t)
    (add-to-list 'sp-ignore-modes-list 'latex-mode)  
    )
#+END_SRC

Rainbow Delimiters is a minor mode which highlights delimiters to their depth.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Buffer management
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

* Editing
** Kill whole line
   IF you place cursor at the beginning of line, the default behaviour of C-k is to kill all text until newline, but not the newline itself. You need to type C-k again to remove that newline. This setting allows to avoid typing C-k twice by killing all text until the newline and newline itself (but only when cursor is placed at the beginning of a line).

#+begin_src emacs-lisp
  (setq kill-whole-line t)
#+end_src

** Automatically clean whitespace
#+begin_src emacs-lisp
  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))
#+end_src

** Undo Control
   Emacs undo model is quite unintuitive for modern people. There is no concept of "redo" - you simply undo the undo. This lets you use C-x u (undo-tree-visualize) to visually walk through the changes you've made, undo back to a certain point (or redo), and go down different branches.

C-/  (`undo-tree-undo') - Undo changes.
C-?  (`undo-tree-redo') - Redo changes.
C-x u  (`undo-tree-visualize') - Visualize the undo tree.

#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+end_src

* Ivy
  I currently use Ivy, Counsel, and Swiper to navigate around files, buffers, and projects super quickly. Here are some workflow notes on how to best use Ivy:
  
  While in an Ivy minibuffer, you can search within the current results by using S-Space.
  
  To quickly jump to an item in the minibuffer, use =C-‘= to get Avy line jump keys.
  
  To see actions for the selected minibuffer item, use M-o and then press the action’s key.
  
  Super useful: Use C-c C-o to open ivy-occur to open the search results in a separate buffer. From there you can click any item to perform the ivy action.
  
  Ivy is an autocompletion system.
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish 
    :init 
    (ivy-mode 1)
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-f" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    ;; Use different regex strategies per completion command
    (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist) ;; This doesn't seem to work...
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

    ;; Set minibuffer height for different commands
    (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
    (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
    (setf (alist-get 'swiper ivy-height-alist) 15)
    (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

  ;; (require 'ivy)
  ;; (ivy-mode 1)
  ;; (setq ivy-use-virtual-buffers t)
  ;; (setq ivy-count-format "(%d/%d) ")
  ;; (setq enable-recursive-minibuffers t)
  ;; ;; enable this if you want `swiper' to use it
  ;; ;; (setq search-default-mode #'char-fold-to-regexp)
  ;; (global-set-key "\C-s" 'swiper)
  ;; (global-set-key (kbd "C-c C-r") 'ivy-resume)
  ;; ;; (global-set-key (kbd "<f6>") 'ivy-resume)
  ;; (global-set-key (kbd "M-x") 'counsel-M-x)
  ;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  ;; ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  ;; ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  ;; ;; (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  ;; ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
  ;; ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  ;; ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  ;; (global-set-key (kbd "C-c g") 'counsel-git)
  ;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
  ;; (global-set-key (kbd "C-c k") 'counsel-ag)
  ;; (global-set-key (kbd "C-x l") 'counsel-locate)
  ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  ;;(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC

Ivy + Hydra
#+begin_src emacs-lisp
  ;; (use-package ivy-hydra
  ;;   :defer t
  ;;   :after hydra)
#+end_src

Ivy-rich enhances ivy
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1)
    :after counsel
    :config
    (setq ivy-format-function #'ivy-format-function-line)
    (setq ivy-rich-display-transformers-list
          (plist-put ivy-rich-display-transformers-list
                     'ivy-switch-buffer
                     '(:columns
                       ((ivy-rich-candidate (:width 40))
                        (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
                        (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
                        (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
                        (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
                       :predicate
                       (lambda (cand)
                         (if-let ((buffer (get-buffer cand)))
                             ;; Don't mess with EXWM buffers
                             (with-current-buffer buffer
                               (not (derived-mode-p 'exwm-mode)))))))))

  (use-package counsel
    :demand t
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ;; ("C-M-j" . counsel-switch-buffer)
           ("C-M-l" . counsel-imenu)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  (use-package flx  ;; Improves sorting for fuzzy-matched results
    :after ivy
    :defer t
    :init
    (setq ivy-flx-limit 10000))

  (use-package wgrep
    :defer 3)

  (use-package ivy-posframe
    :disabled
    :custom
    (ivy-posframe-width      115)
    (ivy-posframe-min-width  115)
    (ivy-posframe-height     10)
    (ivy-posframe-min-height 10)
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    (setq ivy-posframe-parameters '((parent-frame . nil)
                                    (left-fringe . 8)
                                    (right-fringe . 8)))
    (ivy-posframe-mode 1))

  (use-package prescient
    :after counsel
    :config
    (prescient-persist-mode 1))

  (use-package ivy-prescient
    :after prescient
    :config
    (ivy-prescient-mode 1))

  ;; (dw/leader-key-def
  ;;   "r"   '(ivy-resume :which-key "ivy resume")
  ;;   "f"   '(:ignore t :which-key "files")
  ;;   "ff"  '(counsel-find-file :which-key "open file")
  ;;   "C-f" 'counsel-find-file
  ;;   "fr"  '(counsel-recentf :which-key "recent files")
  ;;   "fR"  '(revert-buffer :which-key "revert file")
  ;;   "fj"  '(counsel-file-jump :which-key "jump to file"))
#+end_src

Ivy + Hydra
#+begin_src emacs-lisp
  ;; (use-package ivy-hydra
  ;;   :defer t
  ;;   :after hydra)
#+end_src

Ivy-rich enhances ivy
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1)
    :after counsel
    :config
    (setq ivy-format-function #'ivy-format-function-line)
    (setq ivy-rich-display-transformers-list
          (plist-put ivy-rich-display-transformers-list
                     'ivy-switch-buffer
                     '(:columns
                       ((ivy-rich-candidate (:width 40))
                        (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
                        (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
                        (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
                        (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
                       :predicate
                       (lambda (cand)
                         (if-let ((buffer (get-buffer cand)))
                             ;; Don't mess with EXWM buffers
                             (with-current-buffer buffer
                               (not (derived-mode-p 'exwm-mode)))))))))

  (use-package counsel
    :demand t
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ;; ("C-M-j" . counsel-switch-buffer)
           ("C-M-l" . counsel-imenu)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  (use-package flx  ;; Improves sorting for fuzzy-matched results
    :after ivy
    :defer t
    :init
    (setq ivy-flx-limit 10000))

  (use-package wgrep
    :defer 3)

  (use-package ivy-posframe
    :disabled
    :custom
    (ivy-posframe-width      115)
    (ivy-posframe-min-width  115)
    (ivy-posframe-height     10)
    (ivy-posframe-min-height 10)
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    (setq ivy-posframe-parameters '((parent-frame . nil)
                                    (left-fringe . 8)
                                    (right-fringe . 8)))
    (ivy-posframe-mode 1))

  (use-package prescient
    :after counsel
    :config
    (prescient-persist-mode 1))

  (use-package ivy-prescient
    :after prescient
    :config
    (ivy-prescient-mode 1))

  ;; (dw/leader-key-def
  ;;   "r"   '(ivy-resume :which-key "ivy resume")
  ;;   "f"   '(:ignore t :which-key "files")
  ;;   "ff"  '(counsel-find-file :which-key "open file")
  ;;   "C-f" 'counsel-find-file
  ;;   "fr"  '(counsel-recentf :which-key "recent files")
  ;;   "fR"  '(revert-buffer :which-key "revert file")
  ;;   "fj"  '(counsel-file-jump :which-key "jump to file"))
#+end_src

** Control Buffer Placement
   Emacs’ default buffer placement algorithm is pretty disruptive if you like setting up window layouts a certain way in your workflow. The display-buffer-alist video controls this behavior and you can customize it to prevent Emacs from popping up new windows when you run commands.
#+begin_src emacs-lisp
  (setq display-buffer-base-action
        '(display-buffer-reuse-mode-window
          display-buffer-reuse-window
          display-buffer-same-window))

  ;; If a popup does happen, don't resize windows to be equal-sized
  (setq even-window-sizes nil)
#+end_src

* File Browsing
** Dired
   Configure Dired.
#+begin_src emacs-lisp
  (setq insert-directory-program "gls")
  (use-package dired
    :ensure nil
    ;;:straight nil
    :commands (dired dired-jump)
    :bind (("s-<up>" . dired-single-up-directory))
    :config
    (setq dired-listing-switches "-aghoq --group-directories-first"
          ;;dired-omit-files "^\\.[^.].*"
          dired-omit-verbose nil
          dired-hide-details-hide-symlink-targets nil)

    (autoload 'dired-omit-mode "dired-x")
    (add-hook 'dired-load-hook
              (lambda ()
                (interactive)
                (dired-collapse)))

    (add-hook 'dired-mode-hook
              (lambda ()
                (interactive)
                (dired-omit-mode 1)
                (dired-hide-details-mode 1)
                (all-the-icons-dired-mode 1)
                (hl-line-mode 1)))
    )
#+end_src

Dired-single provides a way to reuse the current dired buffer to visit anther directory (rather than creating a new buffer for the new directory.
#+begin_src emacs-lisp
  (use-package dired-single
    :after (dired)
    :init 
    (define-key dired-mode-map [remap dired-find-file]
      'dired-single-buffer)
    (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
      'dired-single-buffer-mouse)
    (define-key dired-mode-map [remap dired-up-directory]
      'dired-single-up-directory))
#+end_src

Add icons on dired.
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

dired-rainbow adds more customizable highlighting for files in dired listings.
#+begin_src emacs-lisp
  (use-package dired-rainbow
    :after (dired)
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define
     html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define
     xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define
     document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define
     markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define
     media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define
     interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define
     compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define
     compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))
#+end_src

dired-subtree defines the function `dired-subtree-insert` which inserts a subdirectory listing directly below its line in the original listing.
#+begin_src emacs-lisp
  (use-package dired-subtree
    :after (dired)
    :bind
    (:map dired-mode-map
          ("i" . je/dired-subtree-insert)
          (";" . je/dired-subtree-remove)
          ("<tab>" . je/dired-subtree-toggle)
          ("<backtab>" . je/dired-subtree-cycle)))

  ;; Define custom functioons to always revert the dired buffer to keep icons nice!
  (defun je/dired-subtree-insert () (interactive) (dired-subtree-insert) (revert-buffer))
  (defun je/dired-subtree-remove () (interactive) (dired-subtree-remove) (revert-buffer))
  (defun je/dired-subtree-toggle () (interactive) (dired-subtree-toggle) (revert-buffer))
  (defun je/dired-subtree-cycle () (interactive) (dired-subtree-cycle) (revert-buffer))
#+end_src

dired-collapse is inspired by how Github renders "unique" paths: if there is a chain of directories where each one only has one child, they are concatenated toghether and shown on the first level in this collapsed form.
#+begin_src emacs-lisp
  (use-package dired-collapse
    :after dired)
#+end_src

dired-filter and dired-narrow together add a filtering system for dired. 
#+begin_src emacs-lisp
  (use-package dired-filter :after (dired))
  (use-package dired-narrow 
    :after (dired)
    :bind (:map dired-mode-map
                ("C-f" . dired-narrow)))
#+end_src

Configure dired flags.
#+BEGIN_SRC emacs-lisp
  ;;(setq-default dired-listing-switches "-alhgoF")
  ;;(require 'ls-lisp)
  ;;(setq ls-lisp-dirs-first t)
  ;;(setq ls-lisp-use-insert-directory-program nil)
  ;;(setq dired-listing-switches "-a")
#+END_SRC

* Development
** Git
Magit is a git client inside emacs.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :bind 
    ("C-M-;" . magit-status)
    ("C-x C-g" . magit-dispatch-popup)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x C-g") 'magit-dispatch-popup)
  (global-set-key [f6] 'magit-status)
#+END_SRC

Forge: Manage information on Github service (issues, pull requests, etc).
#+begin_src emacs-lisp
  (use-package forge
    :after magit)
#+end_src

magit-todos: This is an interesting extension to Magit that shows a TODOs section in your git status buffer containing all lines with TODO (or other similar words) in files contained within the repo. More information at the GitHub repo.
#+begin_src emacs-lisp
  (use-package magit-todos
    :after magit)
#+end_src

*** Haskell
#+begin_src emacs-lisp
(use-package lsp-haskell
  :ensure t
  :after lsp-mode
  :hook
  (haskell-mode . lsp-deferred)
  (haskell-literate-mode . lsp-deferred)
  :config
  (setq lsp-haskell-server-path "haskell-language-server-wrapper")
  (setq lsp-haskell-server-args ())
  ;; Comment/uncomment this line to see interactions between lsp client/server.
  (setq lsp-log-io t)
  :custom
  (setq lsp-haskell-completion-snippets-on nil)
  )
#+end_src

** Projectile
   Project integration.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config 
  ;;(setq projectile-switch-project-action #'projectile-dired)
  (projectile-mode)
  :custom 
  (projectile-completion-system 'ivy)
  :bind-keymap ("C-c p" . projectile-command-map))

;; Discover projects in folders
;;(setq projectile-project-search-path '("~/projects/" "~/work/" ("~/github" . 1)))
;;(setq projectile-project-search-path '(("~/0-research/" . 2) ("~/2-development/" . 2)))
#+END_SRC

** Markdown
   Markdown mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
#+end_src

** YAML
   Add Yaml Mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode ("\\.yml$" . yaml-mode))
#+END_src

* Org Mode
Configure org mode.
#+begin_src emacs-lisp
(defun je/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords
   'org-mode
   '(("^ *\\([-]\\) "
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
  ))
    ;; (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))
    ;; ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    ;; (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    ;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    ;; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-latex-and-related nil :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-hide nil :inherit 'fixed-pitch)))


(defun je/org-mode-setup ()
  (org-indent-mode)
  ;; (variable-pitch-mode 1)
  (visual-line-mode 1)
  (je/org-font-setup )
)

(use-package org
  :hook (org-mode . je/org-mode-setup)
  :config 
  (setq org-ellipsis " ▾"
        org-startup-folded t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        org-adapt-indentation nil
        org-indent-indentation-per-level 1
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 0)
  )
#+end_src

Use org bullets, it's simply eye candy.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom 
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
  )
#+END_SRC

* Writing
** LaTeX
Inspired by: https://people.umass.edu/weikaichen/zh/post/emacs-academic-tools/

AucTex is an integrated environment for LaTeX.
#+BEGIN_SRC emacs-lisp
(use-package tex-site
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :config 
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook
    (lambda ()
      ;;(setq TeX-command-default "latexmk")
      (rainbow-delimiters-mode)
      (company-mode)
      (turn-on-reftex)
      (setq reftex-plug-into-AUCTeX t)
      (reftex-isearch-minor-mode)
      (setq TeX-PDF-mode t)
      (setq TeX-source-correlate-method 'synctex
            TeX-source-correlate-mode t
            TeX-source-correlate-start-server t)
      (TeX-fold-mode)
      (LaTeX-math-mode)
      (setq LaTeX-electric-left-right-brace t
            TeX-electric-sub-and-superscript t
            TeX-electric-math (cons "\\(" "\\)")
            TeX-electric-escape t)
      )))
#+END_SRC

To switch between english and portuguese dictionaries.
#+BEGIN_SRC emacs-lisp
;(defun fd-switch-dictionary()
;(interactive)
;(let* ((dic ispell-current-dictionary)
;  (change (if (string= dic "brasileiro") "english" "brasileiro")))
;  (ispell-change-dictionary change)
;  (message "Dictionary switched from %s to %s" dic change)))
;(global-set-key (kbd "<f7>")   'fd-switch-dictionary)

(let ((langs '("american" "brasileiro")))
      (setq lang-ring (make-ring (length langs)))
      (dolist (elem langs) (ring-insert lang-ring elem)))
(defun cycle-ispell-languages ()
      (interactive)
      (let ((lang (ring-ref lang-ring -1)))
        (ring-insert lang-ring lang)
        (ispell-change-dictionary lang)))
#+END_SRC

Correct behavior in org mode.
#+BEGIN_SRC emacs-lisp
(defun endless/org-ispell ()
;  "Configure `ispell-skip-region-alist' for `org-mode'."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC")))
(add-hook 'org-mode-hook #'endless/org-ispell)
#+END_SRC

* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
;(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

Garbage colletor hacking.
#+BEGIN_SRC emacs-lisp

; Allow 20MB of memory before calling garbage collection (default is
;0.76MB). This means less GC calls and might speed up some operations.
;(setq gc-cons-threshold (* 20 1000 1000))
;(setq gc-cons-threshold 1800000)

; When using the minibuffer, try to avoid garbage collecting.
; Taken from http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/
(defun my-minibuffer-setup-hook ()
  (setq gc-cons-threshold most-positive-fixnum))

; Normal threshold out of minibuffer.
(defun my-minibuffer-exit-hook ()
  (setq gc-cons-threshold (* 20 1000 1000)))

(add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)

#+END_SRC

** Treemacs
Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  ;:hook
  ;(projectile-after-switch-project . treemacs-display-current-project-exclusively)
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   t
          treemacs-file-event-delay                5000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)
    (treemacs-resize-icons 17)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
    (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))


(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)
#+end_src

Navigate windows and frames using numbers !
#+BEGIN_SRC emacs-lisp
(setq winum-keymap
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "M-1") 'winum-select-window-1)
      (define-key map (kbd "M-2") 'winum-select-window-2)
      (define-key map (kbd "M-3") 'winum-select-window-3)
      (define-key map (kbd "M-4") 'winum-select-window-4)
      (define-key map (kbd "M-5") 'winum-select-window-5)
      (define-key map (kbd "M-6") 'winum-select-window-6)
      (define-key map (kbd "M-7") 'winum-select-window-7)
      (define-key map (kbd "M-8") 'winum-select-window-8)
      map))
  (require 'winum)
  (winum-mode)
#+END_SRC